name: Auto Changelog

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate_changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Versuch, die nÃ¤chste Version zu bekommen, aber nicht abbrechen, wenn kein Tag vorhanden ist
      - name: Get next version (optional)
        id: semver
        uses: ietf-tools/semver-action@v1
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      # Fallback: Standardversion setzen, wenn kein Tag gefunden wurde
      - name: Set default version if no tags
        run: |
          if [ -z "${{ steps.semver.outputs.next }}" ]; then
            echo "No tags found, setting default version"
            echo "::set-output name=next::v1.0.0"
          fi

      # Filter commits with `+` from current PR
      - name: Get commits with `+`
        id: get_commits
        run: |
          COMMITS=$(git log origin/${{ github.base_ref }}..HEAD --oneline)
          echo "All Commits:"
          echo "$COMMITS"
          
          # Filter commits starting with `+`
          CHANGES=$(echo "$COMMITS" | grep '^+')
          
          if [ -z "$CHANGES" ]; then
            echo "No commits with '+' found."
            exit 0
          else
            echo "Filtered commits with '+':"
            echo "$CHANGES"
            echo "changes=$CHANGES" >> $GITHUB_ENV
          fi

      # Create changelog.json if it does not exist
      - name: Create changelog.json if it does not exist
        run: |
          if [ ! -f changelog.json ]; then
            echo "Creating changelog.json"
            echo "[]" > changelog.json
          fi
          cat changelog.json

      # Append new changes to changelog.json
      - name: Update changelog.json with new changes
        run: |
          echo "Appending changes to changelog.json"
          echo "${{ env.changes }}" | jq -R -s -c 'split("\n") | map(select(. != "")) | map({"commit": .})' > new_changes.json
          jq -s '.[0] + .[1]' changelog.json new_changes.json > updated_changelog.json
          mv updated_changelog.json changelog.json
          echo "Updated changelog.json:"
          cat changelog.json

      # Commit changelog.json to the repository
      - name: Commit changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add changelog.json
          git commit -m "Update changelog.json with new changes"
          git push
